import funkin.play.PlayState;
import funkin.play.notes.Strumline;
import funkin.play.notes.NoteSprite;
import funkin.modding.module.Module;
import funkin.play.notes.NoteSplash;
import funkin.play.notes.NoteHoldCover;
import flixel.graphics.frames.FlxAtlasFrames;
import flixel.util.FlxStringUtil;
import funkin.Paths;

class SimplyDokiModule extends Module
{
    var NOTE_SPLASH_FRAMES:FlxAtlasFrames;
    //var HOLD_COVER_FRAMES:FlxAtlasFrames;

    var NOTE_STYLE_ID:String = "simply-dokibird";
    var frameIndices:Array<Int> = [0, 4, 6, 8];

    var actOnPlayer:Bool = false;
    var actOnOpponent:Bool = false;

    // Y'know, I've always wondered why Funkin' calls these "strumlines". Wtf are you strumming? - Binpuki
    var playerBarLine:Strumline;
    var playerSplashes:FlxTypedSpriteGroup<NoteSplash>;
    var playerHoldCovers:FlxTypedSpriteGroup<NoteHoldCover>;

    var opponentBarLine:Strumline;
    var opponentHoldCovers:FlxTypedSpriteGroup<NoteHoldCover>;

    var curIndex:Int = 0;

    var barLineArray:Array<Strumline> = [];

	private function new()
	{
		super("SimplyDoki");

        NOTE_SPLASH_FRAMES = Paths.getSparrowAtlas("simply-doki-splashes", "shared");
        NOTE_SPLASH_FRAMES.parent.persist = true;

        //HOLD_COVER_FRAMES = Paths.getSparrowAtlas("simply-doki-suscovers", "shared");
        //HOLD_COVER_FRAMES.parent.persist = true;
	}

    function updateNote(note:NoteSprite)
    {
        if (note == null)
            return;

        note.animation.curAnim.curFrame = frameIndices[curIndex];
    }

    function updateHoldCover(holdCover:NoteHoldCover)
    {
        holdCover.visible = false;
        /*
        if (holdCover == null || holdCover.glow.frames == HOLD_COVER_FRAMES)
            return;

        var glow = holdCover.glow;

        var curAnimName = "";
        var curAnimFrame = 0;
        if (glow.animation.name != null)
            curAnimName = glow.animation.name;
        if (glow.animation.curAnim != null)
            curAnimFrame = glow.animation.curAnim.curFrame;

        glow.animation.destroyAnimations();
        glow.frames = HOLD_COVER_FRAMES;

        // Copied this from NoteHoldCover LOL
        for (direction in Strumline.DIRECTIONS)
        {
            var directionName = FlxStringUtil.toTitleCase(direction.colorName);

            glow.animation.addByPrefix('holdCoverStart$directionName', 'holdCoverStart${directionName}0', 24, false, false, false);
            glow.animation.addByPrefix('holdCover$directionName', 'holdCover${directionName}0', 24, true, false, false);
            glow.animation.addByPrefix('holdCoverEnd$directionName', 'holdCoverEnd${directionName}0', 24, false, false, false);
        }

        if (curAnimName != "")
            glow.animation.play(curAnimName, true, false, curAnimFrame);
        */
    }

    function updateSplash(splash:NoteSplash)
    {
        if (splash == null || splash.frames == NOTE_SPLASH_FRAMES)
            return;
        
        var curAnimName = "";
        var curAnimFrame = 0;
        if (splash.animation.name != null)
            curAnimName = splash.animation.name;
        if (splash.animation.curAnim != null)
            curAnimFrame = splash.animation.curAnim.curFrame;

        splash.animation.destroyAnimations();
        splash.frames = NOTE_SPLASH_FRAMES;
        
        // Copied this from NoteSplash LOL
        splash.animation.addByPrefix('splash1Left', 'splashLeft10', 24, false, false, false);
        splash.animation.addByPrefix('splash1Down', 'splashDown10', 24, false, false, false);
        splash.animation.addByPrefix('splash1Up', 'splashUp10', 24, false, false, false);
        splash.animation.addByPrefix('splash1Right', 'splashRight10', 24, false, false, false);
        splash.animation.addByPrefix('splash2Left', 'splashLeft20', 24, false, false, false);
        splash.animation.addByPrefix('splash2Down', 'splashDown20', 24, false, false, false);
        splash.animation.addByPrefix('splash2Up', 'splashUp20', 24, false, false, false);
        splash.animation.addByPrefix('splash2Right', 'splashRight20', 24, false, false, false);

        splash.scale.set(0.7, 0.7);
        splash.y -= 10;
        splash.x += 10;

        if (curAnimName != "")
            splash.animation.play(curAnimName, true, false, curAnimFrame);
    }

    override function onSongLoaded(event:SongLoadScriptEvent)
    {
        super.onSongLoaded(event);

        var game = PlayState.instance;
        if (game == null)
            return;
        
        actOnPlayer = game.playerStrumline.noteStyle.id == NOTE_STYLE_ID;
        actOnOpponent = game.opponentStrumline.noteStyle.id == NOTE_STYLE_ID;

        if (actOnPlayer)
        {
            playerBarLine = game.playerStrumline;
            playerBarLine.holdNotes.zIndex = 5;

            var playerHoldContainer = playerBarLine.holdNotes;
            playerBarLine.remove(playerHoldContainer);
            playerBarLine.insert(0, playerHoldContainer);
        }
        
        if (actOnOpponent)
        {
            opponentBarLine = game.opponentStrumline;
            opponentBarLine.holdNotes.zIndex = 5;

            var oppHoldContainer = opponentBarLine.holdNotes;
            opponentBarLine.remove(oppHoldContainer);
            opponentBarLine.insert(0, oppHoldContainer);
        }
    }

    override function onUpdate(event:UpdateScriptEvent)
    {
        super.onUpdate(event);

        var game = PlayState.instance;
        if (game == null)
            return;
    }

    override function onStepHit(event:SongTimeScriptEvent) 
    {
        super.onStepHit(event);

        var game = PlayState.instance;
        if (game == null)
            return;

        if (!actOnPlayer && !actOnOpponent)
            return;

        // Get frame to set to
        curIndex = event.step % 4;

        barLineArray = [];
        if (actOnPlayer)
            barLineArray.push(playerBarLine);
        
        if (actOnOpponent)
            barLineArray.push(opponentBarLine);
        
        for (i in 0...barLineArray.length)
        {
            var curBarLine = barLineArray[i];
            var renderedNotes = curBarLine.notes.members;
            for (j in 0...renderedNotes.length)
                updateNote(renderedNotes[j]);
        }
    }

    override function onNoteIncoming(event:NoteScriptEvent)
    {
        updateNote(event.note);
    }
}