

import flixel.util.FlxTimer;
import funkin.modding.base.ScriptedFlxSpriteGroup;
import funkin.modding.events.ScriptEvent;
import funkin.util.Constants;
import funkin.modding.events.SongLoadScriptEvent;
import funkin.modding.module.Module;
import funkin.graphics.FunkinSprite;
import funkin.play.PlayState;
import funkin.Preferences;
import funkin.Paths;
import flixel.FlxCamera;
import flixel.FlxG;
import flixel.text.FlxText;
import funkin.Highscore;

class CustomUI extends Module
{
  public function new()
  {
    super('CustomUI');
  }

  var missedText:ScriptedFlxSpriteGroup;
  var scoreTxt:ScriptedFlxSpriteGroup;
  var debugMode:Bool = false;
  var scoreSprite:FunkinSprite;
  var missedSprite:FunkinSprite;
  var rankSprite:FunkinSprite;
  var rankPrefectSprite:FunkinSprite;
  var botplaySine:Float = 0;
  var botplayTxt:FlxText;

  var ratingPercent:Float;
  var allowUIRegen = true;

  var scuffs:Int = 0;

  override function onSongLoaded(event:SongLoadScriptEvent)
  {
    scuffs = 0;

    super.onSongLoaded(event);
    trace("Allow Regen: " + allowUIRegen);
    if (PlayState.instance == null || !allowUIRegen) return;
    var game = PlayState.instance;
    allowUIRegen = true;

    var uiY:Float = game.scoreText.y;
    if (!Preferences.downscroll) uiY = game.scoreText.y - 150;

    var uiY:Float = game.scoreText.y;
    if (!Preferences.upscroll) uiY = game.scoreText.y - 7;

    scoreSprite = FunkinSprite.create(401, uiY, "scorecounter");
    scoreSprite.zIndex = 1000;
    scoreSprite.cameras = [game.camHUD];
    scoreSprite.setGraphicSize(Std.int(scoreSprite.width * 0.5));
    scoreSprite.updateHitbox();
    game.add(scoreSprite);

    missedSprite = FunkinSprite.create(720, uiY, "combobreakcounter");

    missedSprite.cameras = [game.camHUD];
    missedSprite.zIndex = 1000;
    missedSprite.setGraphicSize(Std.int(missedSprite.width * 0.5));
    missedSprite.updateHitbox();
    game.add(missedSprite);

    missedText = ScriptedFlxSpriteGroup.init("FunniNumber");
    missedText.x = 871;
    missedText.y = uiY;
    missedText.scrollFactor.set();
    missedText.zIndex = 1000;
    missedText.cameras = [game.camHUD];
    game.add(missedText);

    scoreTxt = ScriptedFlxSpriteGroup.init("FunniNumber");
    scoreTxt.x = 548;
    scoreTxt.y = uiY;
    scoreTxt.scrollFactor.set();
    scoreTxt.zIndex = 1000;
    scoreTxt.cameras = [game.camHUD];
    game.add(scoreTxt);

    botplayTxt = new FlxText(240, 607, FlxG.width - 800, "   BOTPLAY   ", 32);
    botplayTxt.size = 32;
    botplayTxt.font = Paths.font('vcr.ttf');
    botplayTxt.alignment = game.scoreText.alignment;
    botplayTxt.borderStyle = game.scoreText.borderStyle;
    botplayTxt.borderColor = 0xFF000000;
    botplayTxt.scrollFactor.set();
    botplayTxt.borderSize = 1.25;
    botplayTxt.cameras = [game.camHUD];
    botplayTxt.visible = game.isBotPlayMode;
    game.add(botplayTxt);

    game.scoreText.visible = false;

    //who wasted using image instead spritesheet -afeefflox
    rankSprite = FunkinSprite.createSparrow(900, game.scoreText.y - 120, "rankIndicators");
    rankSprite.centerOrigin();
    rankSprite.scale.set(0.7, 0.7);
    rankSprite.cameras = [game.camHUD];
    for(ranky in ['GOLD PERFECT', 'PERFECT', 'EXCELLENT', 'GREAT', 'GOOD', 'LOSE'])
      rankSprite.animation.addByPrefix(ranky, "rankIndicator " + ranky, 24, true);
    rankSprite.animation.play("GOLD PERFECT", true);
    game.add(rankSprite);

    recalculateRating();
  }

  function onUpdate(event)
  {
    super.onUpdate(event);

    if (PlayState.instance == null) 
    {
      scuffs = 0;
      return;
    }

    updateScoreText();
    var game = PlayState.instance;

    debugControl(event.elapsed);

    botplayTxt.visible = game.isBotPlayMode;

    if (botplayTxt != null && botplayTxt.visible)
    {
      botplaySine += 180 * event.elapsed;
      botplayTxt.alpha = 1 - Math.sin((Math.PI * botplaySine) / 180);
    }
  }

  function updateScoreText():Void
  {
    if (PlayState.instance == null) return;
    var game = PlayState.instance;

    if (game.isBotPlayMode) return;

    scoreTxt.scriptCall("displayText", [Std.string(game.songScore), true]);
    missedText.scriptCall("displayText", [Std.string(scuffs), false]);
  }

  function debugControl(elapsed:Float)
  {
    if (!debugMode) return;

    if (PlayState.instance == null) return;
    var game = PlayState.instance;

    var myObject:FlxSprite = rankPrefectSprite;

    var shiftMult:Float = 1;
    var ctrlMult:Float = 1;
    var shiftMultBig:Float = 1;
    if (FlxG.keys.pressed.SHIFT)
    {
      shiftMult = 4;
      shiftMultBig = 10;
    }
    if (FlxG.keys.pressed.CONTROL) ctrlMult = 0.25;

    var changedOffset = false;
    var moveKeysP = [
      FlxG.keys.justPressed.LEFT,
      FlxG.keys.justPressed.RIGHT,
      FlxG.keys.justPressed.UP,
      FlxG.keys.justPressed.DOWN
    ];
    if (moveKeysP.contains(true))
    {
      myObject.x += ((moveKeysP[0] ? 1 : 0) - (moveKeysP[1] ? 1 : 0)) * shiftMultBig;
      myObject.y += ((moveKeysP[2] ? 1 : 0) - (moveKeysP[3] ? 1 : 0)) * shiftMultBig;
      changedOffset = true;
    }

    game.rightWatermarkText.y = -10;
    game.rightWatermarkText.size = 40;
    game.rightWatermarkText.text = 'Object X: ' + myObject.x + ' myObject Y:' + myObject.y;
  }

  function recalculateRating()
  {
    var scoreData = Highscore.tallies;
    if (scoreData.totalNotesHit + scoreData.missed == 0) return; // Prevent divide by 0
    // Rating Percent
    // Grade % (only good and sick), 1.00 is a full combo
    var allNotesSoFar = (scoreData.totalNotesHit + scoreData.missed);
    var grade = (scoreData.sick + scoreData.good) / allNotesSoFar;
    // trace(scoreData.sick + " + " + scoreData.good + " / " + scoreData.totalNotesHit + " + " + scoreData.missed + " = " + grade);
    var isSFC = scoreData.good + scoreData.bad + scoreData.shit + scoreData.missed == 0 || allNotesSoFar == 0;

    if (isSFC)
    {
      rankSprite.animation.play('GOLD PERFECT', false, false, 0);
    }
    else
    {
      if (grade == Constants.RANK_PERFECT_THRESHOLD)
        {
          rankSprite.animation.play('PERFECT', false, false, 0);
        }
        else if (grade >= Constants.RANK_EXCELLENT_THRESHOLD)
        {
          rankSprite.animation.play('EXCELLENT', false, false, 0);
        }
        else if (grade >= Constants.RANK_GREAT_THRESHOLD)
        {
          rankSprite.animation.play('GREAT', false, false, 0);
        }
        else if (grade >= Constants.RANK_GOOD_THRESHOLD)
        {
          rankSprite.animation.play('GOOD', false, false, 0);
        }
        else
        {
          rankSprite.animation.play('LOSE', false, false, 0);
        }
    }
  }

  override function onNoteHit(event:HitNoteScriptEvent)
  {
    super.onNoteHit(event);
    if (PlayState.instance == null) 
      return;

    var game = PlayState.instance;
    if (game.isPracticeMode && game.isBotPlayMode) 
      return;
    
    if (event.isComboBreak)
      scuffs++;

    recalculateRating();
  }

  override function onNoteMiss(event:NoteScriptEvent)
  {
    super.onNoteMiss(event);
    scuffs++;
    recalculateRating();
  }

  override function onStateChangeBegin(event:StateChangeScriptEvent)
  {
    allowUIRegen = true; // band-aid to ensure, that once you leave PlayState this will be "true"
    super.onStateChangeBegin(event);
  }

  override function onSongRetry(event:ScriptEvent)
  {
    super.onSongRetry(event);
    allowUIRegen = false;
  }
}
